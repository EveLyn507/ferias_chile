-- Función para insertar automáticamente en feriante
CREATE OR REPLACE FUNCTION insert_feriante()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO feriante (user_mail) VALUES (NEW.mail);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger para feriante
CREATE OR REPLACE TRIGGER trg_insert_feriante
AFTER INSERT ON usuario
FOR EACH ROW EXECUTE FUNCTION insert_feriante();



-- Función para insertar automáticamente en administrador_municipal
CREATE OR REPLACE FUNCTION insert_administrador_municipal()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO administrador_municipal (user_mail) VALUES (NEW.mail);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger para administrador_municipal
CREATE OR REPLACE TRIGGER trg_insert_administrador_municipal
AFTER INSERT ON usuario
FOR EACH ROW EXECUTE FUNCTION insert_administrador_municipal();




-- Función para insertar automáticamente en encargado_feria
CREATE OR REPLACE FUNCTION insert_encargado_feria()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO encargado_feria (user_mail) VALUES (NEW.mail);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger para encargado_feria
CREATE OR REPLACE TRIGGER trg_insert_encargado_feria
AFTER INSERT ON usuario
FOR EACH ROW EXECUTE FUNCTION insert_encargado_feria();




CREATE OR REPLACE FUNCTION check_feriante_mail()
RETURNS TRIGGER AS $$
DECLARE
    user_exists INTEGER;
BEGIN
    -- Verifica si el mail existe en la tabla usuario
    SELECT COUNT(*)
    INTO user_exists
    FROM usuario
    WHERE mail = NEW.user_mail;

    IF user_exists = 0 THEN
        RAISE EXCEPTION 'El mail % no existe en la tabla usuario. No se puede insertar en feriante.', NEW.user_mail;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER trg_check_feriante_mail
BEFORE INSERT OR UPDATE ON feriante
FOR EACH ROW EXECUTE FUNCTION check_feriante_mail();





CREATE OR REPLACE FUNCTION check_administrador_municipal_mail()
RETURNS TRIGGER AS $$
DECLARE
    user_exists INTEGER;
BEGIN
    -- Verifica si el mail existe en la tabla usuario
    SELECT COUNT(*)
    INTO user_exists
    FROM usuario
    WHERE mail = NEW.user_mail;

    IF user_exists = 0 THEN
        RAISE EXCEPTION 'El mail % no existe en la tabla usuario. No se puede insertar en administrador_municipal.', NEW.user_mail;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;



CREATE OR REPLACE TRIGGER trg_check_administrador_municipal_mail
BEFORE INSERT OR UPDATE ON administrador_municipal
FOR EACH ROW EXECUTE FUNCTION check_administrador_municipal_mail();



CREATE OR REPLACE FUNCTION check_encargado_feria_mail()
RETURNS TRIGGER AS $$
DECLARE
    user_exists INTEGER;
BEGIN
    -- Verifica si el mail existe en la tabla usuario
    SELECT COUNT(*)
    INTO user_exists
    FROM usuario
    WHERE mail = NEW.user_mail;

    IF user_exists = 0 THEN
        RAISE EXCEPTION 'El mail % no existe en la tabla usuario. No se puede insertar en encargado_feria.', NEW.user_mail;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER trg_check_encargado_feria_mail
BEFORE INSERT OR UPDATE ON encargado_feria
FOR EACH ROW EXECUTE FUNCTION check_encargado_feria_mail();




