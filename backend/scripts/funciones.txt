--- ELIMINAR LAS FUNCIONES
DROP FUNCTION IF EXISTS obtener_ferias();
DROP FUNCTION IF EXISTS contar_puestos_actuales(INT);
DROP FUNCTION IF EXISTS traer_puestos_feria(INTEGER);
DROP FUNCTION IF EXISTS obtener_ferias_encargado(CHARACTER VARYING);
DROP FUNCTION IF EXISTS insertar_solicitud_apertura(CHARACTER VARYING, CHARACTER VARYING, INTEGER, CHARACTER VARYING);



-- OBTENER LAS FERIAS EN FEED FERIAS
CREATE OR REPLACE FUNCTION obtener_ferias()
RETURNS TABLE (
    id_feria INTEGER,
    nombre_feria CHARACTER VARYING(80),
    comuna CHARACTER VARYING(80),
    region CHARACTER VARYING(100),
    lunes CHAR(1),
    martes CHAR(1),
    miercoles CHAR(1),
    jueves CHAR(1),
    viernes CHAR(1),
    sabado CHAR(1),
    domingo CHAR(1)
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        f.id_feria, 
        f.nombre AS nombre_feria, 
        c.comuna, 
        g.nombre AS region,
        p.lunes,
        p.martes,
        p.miercoles,
        p.jueves,
        p.viernes,
        p.sabado,
        p.domingo
    FROM 
        public.feria AS f 
    JOIN 
        COMUNA c ON f.id_comuna = c.id_comuna 
    JOIN 
        REGION g ON c.id_region = g.id_region 
    LEFT JOIN 
        programa_feria p ON f.id_feria = p.id_feria; -- Se utiliza un LEFT JOIN para incluir ferias sin programación
END;
$$ LANGUAGE plpgsql;



------------------
-- TRAE LOS PUESTOS + SU HORARIO + feria a la que pertenece

CREATE OR REPLACE FUNCTION traer_puestos_feria(id_de_feria INTEGER)
RETURNS TABLE (
    id_puesto INTEGER,
    id_feria INTEGER,
	estado_puesto CHARACTER VARYING(20),
    nombre_feria CHARACTER VARYING(50),
    num_puesto INTEGER,
    num_horario INTEGER,
    hora_inicio TIME WITH TIME ZONE,
    hora_termino TIME WITH TIME ZONE,
    precio INTEGER

) AS $$
    BEGIN
        RETURN QUERY
     
 SELECT 

        
        p.id_puesto ,
        p.id_feria ,
        ap.estado,
        f.nombre,
        p.numero,
        hp.num_horario ,
        hp.hora_inicio,
        hp.hora_termino,
        hp.precio

        FROM 
        public.feria  f 
        JOIN 
        public.puesto p ON f.id_feria = p.id_feria
        RIGHT JOIN
        public.horario_puesto  hp ON p.id_puesto = hp.id_puesto
        JOIN estado_puesto ap ON p.id_estado_puesto = ap.id_estado_puesto
        WHERE
        f.id_feria = id_de_feria
        ORDER BY p.numero,num_horario;
    END;
   $$ LANGUAGE plpgsql;



// OBTIENE LAS FERIAS DE UN ENCARGADO
CREATE OR REPLACE FUNCTION obtener_ferias_encargado(mail character varying)
RETURNS TABLE (
    id_feria INT,
    nombre_feria character varying(80),
    comuna character varying(80),
    region character varying(80),
    estado character varying(80),
    puestos_actuales INT,
    progra_lunes CHAR(1),
    progra_martes CHAR(1),
    progra_miercoles CHAR(1),
    progra_jueves CHAR(1),
    progra_viernes CHAR(1),
    progra_sabado CHAR(1),
    progra_domingo CHAR(1)
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        f.id_feria, 
        f.nombre AS nombre_feria, 
        c.comuna, 
        g.nombre AS region,
        es.estado,
        contar_puestos_actuales(f.id_feria) AS puestos_actuales,
        pf.lunes AS progra_lunes,
        pf.martes AS progra_martes,
        pf.miercoles AS progra_miercoles,
        pf.jueves AS progra_jueves,
        pf.viernes AS progra_viernes,
        pf.sabado AS progra_sabado,
        pf.domingo AS progra_domingo
    FROM encargado_feria ef
    JOIN feria f ON ef.user_mail = f.encargado_mail
    JOIN comuna c ON f.id_comuna = c.id_comuna
    JOIN region g ON c.id_region = g.id_region
    JOIN estado_feria es ON f.id_estado = es.id_estado
    LEFT JOIN programa_feria pf ON f.id_feria = pf.id_feria  -- Agregar la programación de la feria
    WHERE ef.user_mail = mail;  -- Uso del parámetro 'mail' correctamente
END;
$$ LANGUAGE plpgsql;

-- INSERTA LOS TIKET

CREATE OR REPLACE FUNCTION insertar_solicitud_apertura(
    encargado_mail CHARACTER VARYING,
    admin_muni_mail CHARACTER VARYING,
    id_feria INTEGER,
    estado CHARACTER VARYING(30)
) RETURNS VOID AS $$
BEGIN
    INSERT INTO solicitudes_apertura (encargado_mail, admin_muni_mail, id_feria)
    VALUES (encargado_mail, admin_muni_mail, id_feria);
END;
$$ LANGUAGE plpgsql;




CREATE OR REPLACE FUNCTION contar_puestos_actuales(id_feria_param INT)
RETURNS INT AS $$
DECLARE
    puestos_actuales INT;
BEGIN
    SELECT COUNT(*) INTO puestos_actuales
    FROM puesto
    WHERE puesto.id_feria = id_feria_param;
    
    RETURN puestos_actuales;
END;
$$ LANGUAGE plpgsql;
