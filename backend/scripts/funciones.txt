--- ELIMINAR LAS FUNCIONES
DROP FUNCTION IF EXISTS contar_puestos_actuales(INTEGER);
DROP FUNCTION IF EXISTS traer_puestos_feria(INTEGER);
DROP FUNCTION IF EXISTS obtener_ferias_encargado(INTEGER);
DROP FUNCTION IF EXISTS insertar_solicitud_apertura(CHARACTER VARYING, CHARACTER VARYING, INTEGER, CHARACTER VARYING);
DROP FUNCTION IF EXISTS obtener_horarios_ferias_encargado( integer[]);
DROP FUNCTION IF EXISTS obtener_horarios_ferias_feedFerias( integer[]);


-- FUNCIONES PARA EL ENCARGADOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO

-- OBTIENE LAS FERIAS DE UN ENCARGADO
CREATE OR REPLACE FUNCTION obtener_ferias_encargado(id_user INTEGER)
RETURNS TABLE (
    id_feria INT,
    nombre_feria character varying(80),
    comuna character varying(80),
    region character varying(80),
    estado character varying(80),
    puestos_actuales INT

) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        f.id_feria, 
        f.nombre AS nombre_feria, 
        c.comuna, 
        g.region ,
        es.estado,
        contar_puestos_actuales(f.id_feria) AS puestos_actuales

    FROM encargado_feria ef
    JOIN feria f ON ef.id_user_enf = f.id_user_enf
    JOIN comuna c ON f.id_comuna = c.id_comuna
    JOIN region g ON c.id_region = g.id_region
    JOIN estado_feria es ON f.id_estado = es.id_estado
    WHERE ef.id_user_enf = id_user;  -- uso del parametro
END;
$$ LANGUAGE plpgsql;


-- Retorna 7 columnas (el programa de la feria , activos y desactivos) para cada id de feria --> para la vista encargado
CREATE OR REPLACE FUNCTION obtener_horarios_ferias_encargado(ferias_id INTEGER[])
RETURNS TABLE (
    id_feria INTEGER,
    dia CHARACTER VARYING(10),
    hora_inicio TIME WITHOUT TIME ZONE,
    hora_termino TIME WITHOUT TIME ZONE,
    dia_armado INTEGER,
    hora_inicio_armado TIME WITHOUT TIME ZONE,
    hora_termino_armado TIME WITHOUT TIME ZONE,
    activo boolean
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        h.id_feria,
        h.dia,
        h.hora_inicio,
        h.hora_termino,
        h.id_dia_armado,
        h.hora_inicio_armado,
        h.hora_termino_armado,
        h.activo
    FROM 
        detalle_programa_feria h
    WHERE 
        h.id_feria = ANY(ferias_id);
END;
$$ LANGUAGE plpgsql;


-- INSERTA LOS TIKET
CREATE OR REPLACE FUNCTION insertar_solicitud_apertura(
    encargado_mail CHARACTER VARYING,
    admin_muni_mail CHARACTER VARYING,
    id_feria INTEGER,
    estado CHARACTER VARYING(30)
) RETURNS VOID AS $$
BEGIN
    INSERT INTO solicitudes_apertura (encargado_mail, admin_muni_mail, id_feria)
    VALUES (encargado_mail, admin_muni_mail, id_feria);
END;
$$ LANGUAGE plpgsql;



-- FIN DE LAS FUNCIONES DEL ENCARGADOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO

-- INICIO FUNCIONES PARA EL FEED DE FERIASSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS

-- Retorna las  columnas  activas (del programa de la feria) para cada id de feria --> para el feed de ferias
CREATE OR REPLACE FUNCTION obtener_horarios_ferias_feedFerias(ferias_id INTEGER[])
RETURNS TABLE (
    id_feria INTEGER,
    dia CHARACTER VARYING(10),
    hora_inicio TIME WITHOUT TIME ZONE,
    hora_termino TIME WITHOUT TIME ZONE,
    id_dia_armado INTEGER,
    hora_inicio_armado TIME WITHOUT TIME ZONE,
    hora_termino_armado TIME WITHOUT TIME ZONE
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        h.id_feria,
        h.dia,
        h.hora_inicio,
        h.hora_termino,
        h.id_dia_armado,
        h.hora_inicio_armado,
        h.hora_termino_armado
    FROM 
        detalle_programa_feria h
    WHERE 
        h.id_feria = ANY(ferias_id) AND h.activo = true; 
END;
$$ LANGUAGE plpgsql;


------------------
-- TRAE LOS PUESTOS y SU HORARIO + feria a la que pertenece

CREATE OR REPLACE FUNCTION traer_puestos_feria(id_de_feria INTEGER)
RETURNS TABLE (
    id_puesto INTEGER,
    id_feria INTEGER,
	estado_puesto CHARACTER VARYING(20),
    nombre_feria CHARACTER VARYING(50),
    num_puesto INTEGER,
    num_horario INTEGER,
    hora_inicio TIME WITHOUT TIME ZONE,
    hora_termino TIME WITH TIME ZONE,
    precio INTEGER

) AS $$
    BEGIN
        RETURN QUERY
     
 SELECT 
        p.id_puesto ,
        p.id_feria ,
        ap.estado,
        f.nombre,
        p.numero,
        hp.num_horario ,
        hp.hora_inicio,
        hp.hora_termino,
        hp.precio

        FROM 
        public.feria  f 
        JOIN 
        public.puesto p ON f.id_feria = p.id_feria
        RIGHT JOIN
        public.horario_puesto  hp ON p.id_puesto = hp.id_puesto
        JOIN estado_puesto ap ON p.id_estado_puesto = ap.id_estado_puesto
        WHERE
        f.id_feria = id_de_feria
        ORDER BY p.numero,num_horario;
    END;
   $$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION contar_puestos_actuales(id_feria_param INT)
RETURNS INT AS $$
DECLARE
    puestos_actuales INT;
BEGIN
    SELECT COUNT(*) INTO puestos_actuales
    FROM puesto
    WHERE puesto.id_feria = id_feria_param;
    
    RETURN puestos_actuales;
END;
$$ LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION obtener_ferias_paginado(
    p_limit INTEGER,
    p_offset INTEGER
)
RETURNS TABLE (
    id_feria INTEGER,
    nombre_feria CHARACTER VARYING(80),
    comuna CHARACTER VARYING(80),
    region CHARACTER VARYING(50)
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        f.id_feria, 
        f.nombre AS nombre_feria, 
        c.comuna, 
        g.region AS region
    FROM 
        public.feria AS f 
    JOIN 
        COMUNA c ON f.id_comuna = c.id_comuna 
    JOIN 
        REGION g ON c.id_region = g.id_region
    LIMIT p_limit
    OFFSET p_offset;
END;
$$ LANGUAGE plpgsql;


--FIN FUNCIONES FEED DE FERIASSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS




