--- ELIMINAR LAS FUNCIONES
DROP FUNCTION IF EXISTS contar_puestos_actuales(INTEGER);
DROP FUNCTION IF EXISTS traer_puestos_feria(INTEGER);
DROP FUNCTION IF EXISTS obtener_ferias_encargado(INTEGER);
DROP FUNCTION IF EXISTS insertar_solicitud_apertura(CHARACTER VARYING, CHARACTER VARYING, INTEGER, CHARACTER VARYING);
DROP FUNCTION IF EXISTS obtener_horarios_ferias_encargado( integer[]);
DROP FUNCTION IF EXISTS obtener_horarios_ferias_feedFerias( integer[]);
DROP FUNCTION IF EXISTS obtener_actividades_feria( integer[]);

-- FUNCIONES PARA EL ENCARGADOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO

-- OBTIENE LAS FERIAS DE UN ENCARGADO
CREATE OR REPLACE FUNCTION obtener_ferias_encargado(id_user INTEGER)
RETURNS TABLE (
    id_feria INTEGER,
    nombre_feria character varying(80),
    comuna character varying(80),
    region character varying(80),
    estado character varying(80),
    puestos_actuales INT

) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        f.id_feria, 
        f.nombre AS nombre_feria, 
        c.comuna, 
        g.region ,
        es.estado,
        contar_puestos_actuales(f.id_feria) AS puestos_actuales

    FROM encargado_feria ef
    JOIN feria f ON ef.id_user_enf = f.id_user_enf
    JOIN comuna c ON f.id_comuna = c.id_comuna
    JOIN region g ON c.id_region = g.id_region
    JOIN estado_feria es ON f.id_estado = es.id_estado
    WHERE ef.id_user_enf = id_user -- uso del parametro
    ORDER BY id_feria ASC;
END;
$$ LANGUAGE plpgsql;


-- Retorna 7 columnas (el programa de la feria , activos y desactivos) para cada id de feria --> para la vista encargado
CREATE OR REPLACE FUNCTION obtener_horarios_ferias_encargado(ferias_id INTEGER[])
RETURNS TABLE (
    id_feria INTEGER,
    id_dia INTEGER,
    hora_inicio TIME WITHOUT TIME ZONE,
    hora_termino TIME WITHOUT TIME ZONE,
    dia_armado INTEGER,
    hora_inicio_armado TIME WITHOUT TIME ZONE,
    hora_termino_armado TIME WITHOUT TIME ZONE,
    activo boolean
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        h.id_feria,
        h.id_dia,
        h.hora_inicio,
        h.hora_termino,
        h.id_dia_armado,
        h.hora_inicio_armado,
        h.hora_termino_armado,
        h.activo
    FROM 
        detalle_programa_feria h
    WHERE 
        h.id_feria = ANY(ferias_id);
END;
$$ LANGUAGE plpgsql;


-- INSERTA LOS TIKET
CREATE OR REPLACE FUNCTION insertar_solicitud_apertura(
    id_user_adm INTEGER,
    id_feria INTEGER
) RETURNS VOID AS $$
BEGIN
    INSERT INTO solicitudes_apertura ( id_user_adm, id_feria)
    VALUES (id_user_adm, id_feria);
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION get_plano_elements(func_id_plano INTEGER) 
RETURNS TABLE(
	id_feria INTEGER,
    id_elemento INTEGER, 
	id_plano INTEGER,
    nombre_elemento CHARACTER VARYING(50),
    id_tipo_elemento INTEGER,
    dimenciones JSONB,
    style JSONB,
    "dataPuesto" JSON
) AS $$
BEGIN
    RETURN QUERY
    SELECT
		(select f.id_feria from feria f 
		JOIN plano p ON  p.id_plano = func_id_plano limit 1 ) AS id_feria,
        ep.id_elemento, 
		ep.id_plano,
        ep.nombre_elemento,
        ep.id_tipo_elemento,
        ep.dimenciones,
        ep.style,
        COALESCE(
            (SELECT row_to_json(p) FROM PUESTO p WHERE ep.id_puesto = p.id_puesto),
            'null'::json
        ) AS DataPuesto
    FROM elemento_plano ep
    WHERE ep.id_plano = func_id_plano;
END; 
$$ LANGUAGE plpgsql;





-- FIN DE LAS FUNCIONES DEL ENCARGADOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO

-- INICIO FUNCIONES PARA EL FEED DE FERIASSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS

-- Retorna las  columnas  activas (del programa de la feria) para cada id de feria --> para el feed de ferias
CREATE OR REPLACE FUNCTION obtener_horarios_ferias_feedFerias(ferias_id INTEGER[])
RETURNS TABLE (
    id_feria INTEGER,
    id_dia INTEGER,
    id_horario_feria INTEGER,
    hora_inicio TIME WITHOUT TIME ZONE,
    hora_termino TIME WITHOUT TIME ZONE,
    id_dia_armado INTEGER,
    hora_inicio_armado TIME WITHOUT TIME ZONE,
    hora_termino_armado TIME WITHOUT TIME ZONE
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        h.id_feria,
        h.id_dia,
        h.id_horario_feria,
        h.hora_inicio,
        h.hora_termino,
        h.id_dia_armado,
        h.hora_inicio_armado,
        h.hora_termino_armado
    FROM 
        detalle_programa_feria h
    WHERE 
        h.id_feria = ANY(ferias_id) AND h.activo = true; 
END;
$$ LANGUAGE plpgsql;


------------------
-- TRAE LOS PUESTOS  + feria a la que pertenece

CREATE OR REPLACE FUNCTION traer_puestos_feria(id_de_feria INTEGER)
RETURNS TABLE (
    id_puesto INTEGER,
    id_feria INTEGER,
	estado_puesto CHARACTER VARYING(20),
    nombre_feria CHARACTER VARYING(50),
    num_puesto INTEGER
) AS $$
    BEGIN
        RETURN QUERY
     
 SELECT 
        p.id_puesto ,
        p.id_feria ,
        ap.estado,
        f.nombre,
        p.numero

        FROM 
        public.feria  f 
        JOIN 
        public.puesto p ON f.id_feria = p.id_feria
        JOIN estado_puesto ap ON p.id_estado_puesto = ap.id_estado_puesto
        WHERE
        f.id_feria = id_de_feria
        ORDER BY p.numero;
    END;
   $$ LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION traer_semana_actividad_feria(func_id_feria INTEGER)
RETURNS TABLE (
    var_id_puesto INTEGER,
    var_id_feria INTEGER,
	var_estado_puesto CHARACTER VARYING(20),
    var_nombre_feria CHARACTER VARYING(50),
    var_num_puesto INTEGER,
    var_num_horario INTEGER,
    var_hora_inicio TIME WITHOUT TIME ZONE,
    var_hora_termino TIME WITHOUT TIME ZONE,
    var_precio INTEGER

) AS $$
    BEGIN
        RETURN QUERY
     
 SELECT 
        p.id_puesto ,
        p.id_feria ,
        ap.estado,
        f.nombre,
        p.numero,
        hp.num_horario ,
        hp.hora_inicio,
        hp.hora_termino,
        hp.precio

        FROM 
        public.feria  f 
        JOIN 
        public.puesto p ON f.id_feria = p.id_feria
        RIGHT JOIN
        public.horario_puesto  hp ON p.id_puesto = hp.id_puesto
        JOIN estado_puesto ap ON p.id_estado_puesto = ap.id_estado_puesto
        WHERE
        f.id_feria = func_id_feria
        ORDER BY p.numero,num_horario;
    END;
   $$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION contar_puestos_actuales(id_feria_param INT)
RETURNS INT AS $$
DECLARE
    puestos_actuales INT;
BEGIN
    SELECT COUNT(*) INTO puestos_actuales
    FROM puesto
    WHERE puesto.id_feria = id_feria_param;
    
    RETURN puestos_actuales;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION obtener_ferias_paginado(
    p_limit INTEGER,
    p_offset INTEGER,
    p_region INTEGER DEFAULT NULL,
    p_comuna INTEGER DEFAULT NULL
)
RETURNS TABLE (
    id_feria INTEGER,
    nombre_feria CHARACTER VARYING(80),
    comuna CHARACTER VARYING(80),
    region CHARACTER VARYING(50)
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        f.id_feria, 
        f.nombre AS nombre_feria, 
        c.comuna, 
        g.region AS region
    FROM 
        public.feria AS f 
    JOIN 
        COMUNA c ON f.id_comuna = c.id_comuna 
    JOIN 
        REGION g ON c.id_region = g.id_region
    WHERE
        -- Si p_region no es NULL, filtrar por regi√≥n
        (p_region IS NULL OR g.id_region = p_region)
        -- Si p_comuna no es NULL, filtrar por comuna
        AND (p_comuna IS NULL OR c.id_comuna = p_comuna)
    LIMIT p_limit
    OFFSET p_offset;

END;
$$ LANGUAGE plpgsql;





CREATE OR REPLACE FUNCTION obtener_actividades_feria(
   ids_horario INTEGER[]
)
RETURNS TABLE (
    id_feria INTEGER,
    id_actividad_feria INTEGER,
    id_horario_feria INTEGER,
    fecha DATE ,
	armado_hecho boolean,
	feria_hecha boolean
    
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
	dpf.id_feria,
	af.id_actividad_feria,
	af.id_horario_feria,
	af.fecha,
	af.armado_hecho,
	af.feria_hecha
	FROM detalle_programa_feria dpf
	JOIN actividad_feria af ON af.id_horario_feria = dpf.id_horario_feria
	WHERE dpf.id_feria = ANY(ids_horario);
  
END;
$$ LANGUAGE plpgsql;




CREATE OR REPLACE FUNCTION obtener_puestos_actividad(func_nombre_f CHARACTER VARYING , func_fecha DATE )
RETURNS TABLE (
id_feria INTEGER,
nombre_feria CHARACTER VARYING,
id_actividad_feria INTEGER,
id_dia INTEGER,
fecha DATE,
id_puesto INTEGER,
hora_inicio TIME WITHOUT TIME ZONE,
hora_termino TIME WITHOUT TIME ZONE,
id_arriendo_puesto INTEGER,
id_estado_arriendo INTEGER,
numero INTEGER,
precio INTEGER

) AS $$

BEGIN
RETURN QUERY
SELECT
f.id_feria,
f.nombre as nombre_feria,
af.id_actividad_feria,
dpf.id_dia,
af.fecha,
ap.id_puesto,
dpf.hora_inicio,
dpf.hora_termino,
ap.id_arriendo_puesto,
ap.id_estado_arriendo,
p.numero,
p.precio

from feria f

JOIN detalle_programa_feria dpf ON f.id_feria = dpf.id_feria
JOIN actividad_feria af ON af.id_horario_feria = dpf.id_horario_feria
JOIN arriendo_puesto ap ON ap.id_actividad_feria = af.id_actividad_feria
JOIN puesto p ON ap.id_puesto = p.id_puesto 
WHERE f.nombre = func_nombre_f and af.fecha = func_fecha
order by ap.id_puesto;

END;
$$ LANGUAGE plpgsql; 

--FIN FUNCIONES FEED DE FERIASSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS





